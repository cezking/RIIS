//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8825
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.8825 版自动生成。
// 
#pragma warning disable 1591

namespace Dictionary2CS.DbWebSvc {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DbWebSvcSoap", Namespace="http://tempuri.org/")]
    public partial class DbWebSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataFromSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWithParam_2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteStoredProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteBatchSQLOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DbWebSvc() {
            this.Url = global::Dictionary2CS.Properties.Settings.Default.Dictionary2CS_DbWebSvc_DbWebSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataFromSqlCompletedEventHandler GetDataFromSqlCompleted;
        
        /// <remarks/>
        public event ExecuteSqlCompletedEventHandler ExecuteSqlCompleted;
        
        /// <remarks/>
        public event InsertWithParamCompletedEventHandler InsertWithParamCompleted;
        
        /// <remarks/>
        public event UpdateWithParamCompletedEventHandler UpdateWithParamCompleted;
        
        /// <remarks/>
        public event UpdateWithParam_2CompletedEventHandler UpdateWithParam_2Completed;
        
        /// <remarks/>
        public event ExecuteStoredProcedureCompletedEventHandler ExecuteStoredProcedureCompleted;
        
        /// <remarks/>
        public event GetDataTablesCompletedEventHandler GetDataTablesCompleted;
        
        /// <remarks/>
        public event ExecuteBatchSQLCompletedEventHandler ExecuteBatchSQLCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataFromSql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDataFromSql(string strSql) {
            object[] results = this.Invoke("GetDataFromSql", new object[] {
                        strSql});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromSqlAsync(string strSql) {
            this.GetDataFromSqlAsync(strSql, null);
        }
        
        /// <remarks/>
        public void GetDataFromSqlAsync(string strSql, object userState) {
            if ((this.GetDataFromSqlOperationCompleted == null)) {
                this.GetDataFromSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromSqlOperationCompleted);
            }
            this.InvokeAsync("GetDataFromSql", new object[] {
                        strSql}, this.GetDataFromSqlOperationCompleted, userState);
        }
        
        private void OnGetDataFromSqlOperationCompleted(object arg) {
            if ((this.GetDataFromSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromSqlCompleted(this, new GetDataFromSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSql(string strSql) {
            this.Invoke("ExecuteSql", new object[] {
                        strSql});
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string strSql) {
            this.ExecuteSqlAsync(strSql, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string strSql, object userState) {
            if ((this.ExecuteSqlOperationCompleted == null)) {
                this.ExecuteSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlOperationCompleted);
            }
            this.InvokeAsync("ExecuteSql", new object[] {
                        strSql}, this.ExecuteSqlOperationCompleted, userState);
        }
        
        private void OnExecuteSqlOperationCompleted(object arg) {
            if ((this.ExecuteSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWithParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertWithParam(string tableName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ParameterBytes) {
            this.Invoke("InsertWithParam", new object[] {
                        tableName,
                        ParameterBytes});
        }
        
        /// <remarks/>
        public void InsertWithParamAsync(string tableName, byte[] ParameterBytes) {
            this.InsertWithParamAsync(tableName, ParameterBytes, null);
        }
        
        /// <remarks/>
        public void InsertWithParamAsync(string tableName, byte[] ParameterBytes, object userState) {
            if ((this.InsertWithParamOperationCompleted == null)) {
                this.InsertWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWithParamOperationCompleted);
            }
            this.InvokeAsync("InsertWithParam", new object[] {
                        tableName,
                        ParameterBytes}, this.InsertWithParamOperationCompleted, userState);
        }
        
        private void OnInsertWithParamOperationCompleted(object arg) {
            if ((this.InsertWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWithParamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWithParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWithParam(string tableName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ParameterBytes) {
            this.Invoke("UpdateWithParam", new object[] {
                        tableName,
                        ParameterBytes});
        }
        
        /// <remarks/>
        public void UpdateWithParamAsync(string tableName, byte[] ParameterBytes) {
            this.UpdateWithParamAsync(tableName, ParameterBytes, null);
        }
        
        /// <remarks/>
        public void UpdateWithParamAsync(string tableName, byte[] ParameterBytes, object userState) {
            if ((this.UpdateWithParamOperationCompleted == null)) {
                this.UpdateWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWithParamOperationCompleted);
            }
            this.InvokeAsync("UpdateWithParam", new object[] {
                        tableName,
                        ParameterBytes}, this.UpdateWithParamOperationCompleted, userState);
        }
        
        private void OnUpdateWithParamOperationCompleted(object arg) {
            if ((this.UpdateWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWithParamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWithParam_2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWithParam_2(string tableName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ParameterBytes, int keyNum) {
            this.Invoke("UpdateWithParam_2", new object[] {
                        tableName,
                        ParameterBytes,
                        keyNum});
        }
        
        /// <remarks/>
        public void UpdateWithParam_2Async(string tableName, byte[] ParameterBytes, int keyNum) {
            this.UpdateWithParam_2Async(tableName, ParameterBytes, keyNum, null);
        }
        
        /// <remarks/>
        public void UpdateWithParam_2Async(string tableName, byte[] ParameterBytes, int keyNum, object userState) {
            if ((this.UpdateWithParam_2OperationCompleted == null)) {
                this.UpdateWithParam_2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWithParam_2OperationCompleted);
            }
            this.InvokeAsync("UpdateWithParam_2", new object[] {
                        tableName,
                        ParameterBytes,
                        keyNum}, this.UpdateWithParam_2OperationCompleted, userState);
        }
        
        private void OnUpdateWithParam_2OperationCompleted(object arg) {
            if ((this.UpdateWithParam_2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWithParam_2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteStoredProcedure", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteStoredProcedure(string tableName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ParameterBytes) {
            this.Invoke("ExecuteStoredProcedure", new object[] {
                        tableName,
                        ParameterBytes});
        }
        
        /// <remarks/>
        public void ExecuteStoredProcedureAsync(string tableName, byte[] ParameterBytes) {
            this.ExecuteStoredProcedureAsync(tableName, ParameterBytes, null);
        }
        
        /// <remarks/>
        public void ExecuteStoredProcedureAsync(string tableName, byte[] ParameterBytes, object userState) {
            if ((this.ExecuteStoredProcedureOperationCompleted == null)) {
                this.ExecuteStoredProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteStoredProcedureOperationCompleted);
            }
            this.InvokeAsync("ExecuteStoredProcedure", new object[] {
                        tableName,
                        ParameterBytes}, this.ExecuteStoredProcedureOperationCompleted, userState);
        }
        
        private void OnExecuteStoredProcedureOperationCompleted(object arg) {
            if ((this.ExecuteStoredProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteStoredProcedureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataTables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDataTables(string[] tableNameList) {
            object[] results = this.Invoke("GetDataTables", new object[] {
                        tableNameList});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataTablesAsync(string[] tableNameList) {
            this.GetDataTablesAsync(tableNameList, null);
        }
        
        /// <remarks/>
        public void GetDataTablesAsync(string[] tableNameList, object userState) {
            if ((this.GetDataTablesOperationCompleted == null)) {
                this.GetDataTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataTablesOperationCompleted);
            }
            this.InvokeAsync("GetDataTables", new object[] {
                        tableNameList}, this.GetDataTablesOperationCompleted, userState);
        }
        
        private void OnGetDataTablesOperationCompleted(object arg) {
            if ((this.GetDataTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataTablesCompleted(this, new GetDataTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteBatchSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteBatchSQL(string[] sqlArr) {
            this.Invoke("ExecuteBatchSQL", new object[] {
                        sqlArr});
        }
        
        /// <remarks/>
        public void ExecuteBatchSQLAsync(string[] sqlArr) {
            this.ExecuteBatchSQLAsync(sqlArr, null);
        }
        
        /// <remarks/>
        public void ExecuteBatchSQLAsync(string[] sqlArr, object userState) {
            if ((this.ExecuteBatchSQLOperationCompleted == null)) {
                this.ExecuteBatchSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteBatchSQLOperationCompleted);
            }
            this.InvokeAsync("ExecuteBatchSQL", new object[] {
                        sqlArr}, this.ExecuteBatchSQLOperationCompleted, userState);
        }
        
        private void OnExecuteBatchSQLOperationCompleted(object arg) {
            if ((this.ExecuteBatchSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteBatchSQLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void GetDataFromSqlCompletedEventHandler(object sender, GetDataFromSqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void ExecuteSqlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void InsertWithParamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void UpdateWithParamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void UpdateWithParam_2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void ExecuteStoredProcedureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void GetDataTablesCompletedEventHandler(object sender, GetDataTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.8825")]
    public delegate void ExecuteBatchSQLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591